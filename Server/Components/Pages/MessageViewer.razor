@page "/messages"
@using Common.Base
@using Microsoft.EntityFrameworkCore
@using Server.Database
@using Server.Models
@using Server.Services
@inject MessageService MessageSvc
@inject CharacterService CharacterSvc
@rendermode InteractiveServer

<h3>All Received Messages</h3>

@if (messages is null)
{
    <p><em>Loading…</em></p>
}
else if (!messages.Any())
{
    <p><em>No messages yet.</em></p>
}
else
{
    <ul>
        @foreach (var m in messages)
        {
            <li>@m.SentAt.ToLocalTime(): <strong>@m.User</strong> — @m.Text</li>
        }
    </ul>
}

<div class="container my-4">
    @if (characters == null)
    {
        <p><em>Loading…</em></p>
    }
    else if (!characters.Any())
    {
        <p><em>No characters found.</em></p>
    }
    else
    {
        <div class="row g-4">
            @foreach (var ch in characters)
            {
                <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                    <div class="card h-100">
                        <div class="card-header">
                            <h5 class="card-title mb-0">@ch.Name</h5>
                            <small class="text-muted">Level @ch.Level</small>
                        </div>
                        <div class="card-body p-3">
                            <p><strong>Race:</strong> @ch.Race.Name (@ch.Race.NameRu)</p>
                            <p><strong>Class:</strong> @ch.Class.Name</p>
                            <p><strong>HP:</strong> @ch.BaseHP</p>

                            <h6>Stats</h6>
                            <ul class="list-unstyled small mb-2">
                                <li><strong>STR:</strong> @ch.Stats.Strength</li>
                                <li><strong>AGI:</strong> @ch.Stats.Agility</li>
                                <li><strong>INT:</strong> @ch.Stats.Intelligence</li>
                                <li><strong>UTL:</strong> @ch.Stats.Utility</li>
                            </ul>

                            <p><strong>Skill Points:</strong> @ch.CharacterSkills.SkillPoints</p>

                            <h6>Inventory</h6>
                            @if (ch.Inventory?.Any() == true)
                            {
                                <ul class="list-unstyled small">
                                    @foreach (var item in ch.Inventory)
                                    {
                                        <li>@item.Name &times; @item.Description</li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p class="small text-muted mb-0"><em>Empty</em></p>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<Message>? messages;

    private List<Character>? characters;

    protected override async Task OnInitializedAsync()
    {
        messages = await MessageSvc.GetAllAsync();
        characters = await CharacterSvc.GetAllAsync();

        MessageSvc.MessageAdded += (message) =>
        {
            messages?.Add(message);
            InvokeAsync(StateHasChanged);
        };
    }

    public async ValueTask DisposeAsync()
    {
    }
}
