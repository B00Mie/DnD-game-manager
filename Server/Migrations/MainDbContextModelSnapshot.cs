// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Database;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(MainDbContext))]
    partial class MainDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("Common.Base.Character", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Common.Base.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaseHP")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BasicStatsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StatsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BasicStatsId");

                    b.HasIndex("StatsId");

                    b.ToTable("Races");

                    b.HasDiscriminator().HasValue("Race");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Common.Base.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SkillGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SkillGroupId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Common.Base.SkillGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SkillGroups");
                });

            modelBuilder.Entity("Common.Base.Stats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("Server.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Common.Races.Drow", b =>
                {
                    b.HasBaseType("Common.Base.Race");

                    b.HasDiscriminator().HasValue("Drow");
                });

            modelBuilder.Entity("Common.Races.Dwarf", b =>
                {
                    b.HasBaseType("Common.Base.Race");

                    b.HasDiscriminator().HasValue("Dwarf");
                });

            modelBuilder.Entity("Common.Races.Goblin", b =>
                {
                    b.HasBaseType("Common.Base.Race");

                    b.HasDiscriminator().HasValue("Goblin");
                });

            modelBuilder.Entity("Common.Races.Human", b =>
                {
                    b.HasBaseType("Common.Base.Race");

                    b.HasDiscriminator().HasValue("Human");
                });

            modelBuilder.Entity("Common.Races.Khajiit", b =>
                {
                    b.HasBaseType("Common.Base.Race");

                    b.HasDiscriminator().HasValue("Khajiit");
                });

            modelBuilder.Entity("Common.Races.Orc", b =>
                {
                    b.HasBaseType("Common.Base.Race");

                    b.HasDiscriminator().HasValue("Orc");
                });

            modelBuilder.Entity("Common.Races.Underwater", b =>
                {
                    b.HasBaseType("Common.Base.Race");

                    b.HasDiscriminator().HasValue("Underwater");
                });

            modelBuilder.Entity("Common.Races.Winged", b =>
                {
                    b.HasBaseType("Common.Base.Race");

                    b.HasDiscriminator().HasValue("Winged");
                });

            modelBuilder.Entity("Common.Races.WoodElf", b =>
                {
                    b.HasBaseType("Common.Base.Race");

                    b.HasDiscriminator().HasValue("WoodElf");
                });

            modelBuilder.Entity("Common.Base.Character", b =>
                {
                    b.HasOne("Common.Base.Race", "Race")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Common.Base.CharacterClass", "Class", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<int>("Id")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("CharacterId");

                            b1.ToTable("CharacterClasses");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.OwnsOne("Common.Base.CharacterSkills", "CharacterSkills", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("GenerallSkillsId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Id")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("MagicSkillsId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("SkillPoints")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("WeaponSkillsId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("CharacterId");

                            b1.HasIndex("GenerallSkillsId");

                            b1.HasIndex("MagicSkillsId");

                            b1.HasIndex("WeaponSkillsId");

                            b1.ToTable("Characters");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");

                            b1.HasOne("Common.Base.SkillGroup", "GenerallSkills")
                                .WithMany()
                                .HasForeignKey("GenerallSkillsId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.HasOne("Common.Base.SkillGroup", "MagicSkills")
                                .WithMany()
                                .HasForeignKey("MagicSkillsId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.HasOne("Common.Base.SkillGroup", "WeaponSkills")
                                .WithMany()
                                .HasForeignKey("WeaponSkillsId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("GenerallSkills");

                            b1.Navigation("MagicSkills");

                            b1.Navigation("WeaponSkills");
                        });

                    b.OwnsMany("Common.Base.InventoryItem", "Inventory", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("TEXT");

                            b1.Property<int>("CharacterId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("Id", "CharacterId");

                            b1.HasIndex("CharacterId");

                            b1.ToTable("InventoryItems");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.Navigation("CharacterSkills")
                        .IsRequired();

                    b.Navigation("Class")
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("Common.Base.Race", b =>
                {
                    b.HasOne("Common.Base.Stats", "BasicStats")
                        .WithMany()
                        .HasForeignKey("BasicStatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Base.Stats", "Stats")
                        .WithMany()
                        .HasForeignKey("StatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BasicStats");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("Common.Base.Skill", b =>
                {
                    b.HasOne("Common.Base.SkillGroup", null)
                        .WithMany("Skills")
                        .HasForeignKey("SkillGroupId");
                });

            modelBuilder.Entity("Common.Base.SkillGroup", b =>
                {
                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}
