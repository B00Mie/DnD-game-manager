// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Database;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20250518195705_CharacterRelations")]
    partial class CharacterRelations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("Common.Base.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaseHP")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RaceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Common.Base.CharacterSkills", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GenerallSkillsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MagicSkillsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SkillPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WeaponSkillsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.HasIndex("GenerallSkillsId");

                    b.HasIndex("MagicSkillsId");

                    b.HasIndex("WeaponSkillsId");

                    b.ToTable("CharacterSkills");
                });

            modelBuilder.Entity("Common.Base.InventoryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("InventoryItems");
                });

            modelBuilder.Entity("Common.Base.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaseHP")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeRu")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Races");

                    b.HasDiscriminator().HasValue("Race");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseHP = 200,
                            Name = "Human",
                            NameRu = "Человек",
                            Type = "CleanBlood",
                            TypeRu = "Чистокровный"
                        },
                        new
                        {
                            Id = 2,
                            BaseHP = 350,
                            Name = "Dwarf",
                            NameRu = "Гном",
                            Type = "DirtyBlood",
                            TypeRu = "Грязнокровка"
                        },
                        new
                        {
                            Id = 3,
                            BaseHP = 300,
                            Name = "Orc",
                            NameRu = "Орк",
                            Type = "CleanBlood",
                            TypeRu = "Чистокровный"
                        },
                        new
                        {
                            Id = 4,
                            BaseHP = 200,
                            Name = "Khajiit",
                            NameRu = "Каджит",
                            Type = "DirtyBlood",
                            TypeRu = "Грязнокровка"
                        },
                        new
                        {
                            Id = 5,
                            BaseHP = 325,
                            Name = "Underwater",
                            NameRu = "Глубоководный",
                            Type = "CleanBlood",
                            TypeRu = "Чистокровный"
                        },
                        new
                        {
                            Id = 6,
                            BaseHP = 250,
                            Name = "Drow",
                            NameRu = "Тёмный эльф",
                            Type = "CleanBlood",
                            TypeRu = "Чистокровный"
                        },
                        new
                        {
                            Id = 7,
                            BaseHP = 250,
                            Name = "WoodElf",
                            NameRu = "Лесной эльф",
                            Type = "CleanBlood",
                            TypeRu = "Чистокровный"
                        },
                        new
                        {
                            Id = 8,
                            BaseHP = 250,
                            Name = "Winged",
                            NameRu = "Крылатый",
                            Type = "CleanBlood",
                            TypeRu = "Чистокровный"
                        },
                        new
                        {
                            Id = 9,
                            BaseHP = 150,
                            Name = "Goblin",
                            NameRu = "Гоблин",
                            Type = "DirtyBlood",
                            TypeRu = "Грязнокровка"
                        });
                });

            modelBuilder.Entity("Common.Base.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SkillGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SkillGroupId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Common.Base.SkillGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SkillGroups");
                });

            modelBuilder.Entity("Server.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Common.Races.Drow", b =>
                {
                    b.HasBaseType("Common.Base.Race");

                    b.HasDiscriminator().HasValue("Drow");
                });

            modelBuilder.Entity("Common.Races.Dwarf", b =>
                {
                    b.HasBaseType("Common.Base.Race");

                    b.HasDiscriminator().HasValue("Dwarf");
                });

            modelBuilder.Entity("Common.Races.Goblin", b =>
                {
                    b.HasBaseType("Common.Base.Race");

                    b.HasDiscriminator().HasValue("Goblin");
                });

            modelBuilder.Entity("Common.Races.Human", b =>
                {
                    b.HasBaseType("Common.Base.Race");

                    b.HasDiscriminator().HasValue("Human");
                });

            modelBuilder.Entity("Common.Races.Khajiit", b =>
                {
                    b.HasBaseType("Common.Base.Race");

                    b.HasDiscriminator().HasValue("Khajiit");
                });

            modelBuilder.Entity("Common.Races.Orc", b =>
                {
                    b.HasBaseType("Common.Base.Race");

                    b.HasDiscriminator().HasValue("Orc");
                });

            modelBuilder.Entity("Common.Races.Underwater", b =>
                {
                    b.HasBaseType("Common.Base.Race");

                    b.HasDiscriminator().HasValue("Underwater");
                });

            modelBuilder.Entity("Common.Races.Winged", b =>
                {
                    b.HasBaseType("Common.Base.Race");

                    b.HasDiscriminator().HasValue("Winged");
                });

            modelBuilder.Entity("Common.Races.WoodElf", b =>
                {
                    b.HasBaseType("Common.Base.Race");

                    b.HasDiscriminator().HasValue("WoodElf");
                });

            modelBuilder.Entity("Common.Base.Character", b =>
                {
                    b.HasOne("Common.Base.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Common.Base.CharacterClass", "Class", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<int>("Id")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("ClassName");

                            b1.HasKey("CharacterId");

                            b1.ToTable("CharacterClasses");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.OwnsOne("Common.Base.Stats", "Stats", b1 =>
                        {
                            b1.Property<int>("CharacterId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Id")
                                .HasColumnType("INTEGER");

                            b1.HasKey("CharacterId");

                            b1.ToTable("Characters");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.Navigation("Class")
                        .IsRequired();

                    b.Navigation("Race");

                    b.Navigation("Stats")
                        .IsRequired();
                });

            modelBuilder.Entity("Common.Base.CharacterSkills", b =>
                {
                    b.HasOne("Common.Base.Character", null)
                        .WithOne("CharacterSkills")
                        .HasForeignKey("Common.Base.CharacterSkills", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Base.SkillGroup", "GenerallSkills")
                        .WithMany()
                        .HasForeignKey("GenerallSkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Base.SkillGroup", "MagicSkills")
                        .WithMany()
                        .HasForeignKey("MagicSkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Base.SkillGroup", "WeaponSkills")
                        .WithMany()
                        .HasForeignKey("WeaponSkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GenerallSkills");

                    b.Navigation("MagicSkills");

                    b.Navigation("WeaponSkills");
                });

            modelBuilder.Entity("Common.Base.InventoryItem", b =>
                {
                    b.HasOne("Common.Base.Character", null)
                        .WithMany("Inventory")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Common.Base.Race", b =>
                {
                    b.OwnsOne("Common.Base.BasicStats", "BasicStats", b1 =>
                        {
                            b1.Property<int>("RaceId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Agility")
                                .HasColumnType("INTEGER")
                                .HasColumnName("BaseAgility");

                            b1.Property<int>("Intelligence")
                                .HasColumnType("INTEGER")
                                .HasColumnName("BaseIntelligence");

                            b1.Property<int>("Strength")
                                .HasColumnType("INTEGER")
                                .HasColumnName("BaseStrength");

                            b1.Property<int>("Utility")
                                .HasColumnType("INTEGER")
                                .HasColumnName("BaseUtility");

                            b1.HasKey("RaceId");

                            b1.ToTable("Races");

                            b1.WithOwner()
                                .HasForeignKey("RaceId");

                            b1.HasData(
                                new
                                {
                                    RaceId = 1,
                                    Agility = 1,
                                    Intelligence = 1,
                                    Strength = 1,
                                    Utility = 1
                                },
                                new
                                {
                                    RaceId = 2,
                                    Agility = 1,
                                    Intelligence = 1,
                                    Strength = 2,
                                    Utility = 3
                                },
                                new
                                {
                                    RaceId = 3,
                                    Agility = 1,
                                    Intelligence = 1,
                                    Strength = 5,
                                    Utility = 3
                                },
                                new
                                {
                                    RaceId = 4,
                                    Agility = 4,
                                    Intelligence = 1,
                                    Strength = 1,
                                    Utility = 1
                                },
                                new
                                {
                                    RaceId = 5,
                                    Agility = 1,
                                    Intelligence = 2,
                                    Strength = 3,
                                    Utility = 1
                                },
                                new
                                {
                                    RaceId = 6,
                                    Agility = 3,
                                    Intelligence = 3,
                                    Strength = 2,
                                    Utility = 2
                                },
                                new
                                {
                                    RaceId = 7,
                                    Agility = 3,
                                    Intelligence = 1,
                                    Strength = 3,
                                    Utility = 2
                                },
                                new
                                {
                                    RaceId = 8,
                                    Agility = 2,
                                    Intelligence = 3,
                                    Strength = 2,
                                    Utility = 2
                                },
                                new
                                {
                                    RaceId = 9,
                                    Agility = 2,
                                    Intelligence = 3,
                                    Strength = 1,
                                    Utility = 3
                                });
                        });

                    b.Navigation("BasicStats")
                        .IsRequired();
                });

            modelBuilder.Entity("Common.Base.Skill", b =>
                {
                    b.HasOne("Common.Base.SkillGroup", null)
                        .WithMany("Skills")
                        .HasForeignKey("SkillGroupId");
                });

            modelBuilder.Entity("Common.Base.Character", b =>
                {
                    b.Navigation("CharacterSkills")
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("Common.Base.SkillGroup", b =>
                {
                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}
